% Task 1: VaR and Expected Shortfall
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


dates = readmatrix('timeSeries.xlsx', 'Sheet', 'Problem 1 and 2', 'Range', 'B3:B1649');
tradeClose = readmatrix('timeSeries.xlsx', 'Sheet', 'Problem 1 and 2', 'Range', 'C3:Q1649');

tradeClose = flipud(tradeClose);
portfolio_value = 10000000;

%portfolio_value = 10;
T = length(dates);
stocks = 15;
n = 15; % There are 15 different stocks in the portfolio
omega = zeros(1, n);
omega(1,:) = 1 / n;
lambda = 0.94;


% Calculating returns matrix for all stocks from t = 1 ... T + 1

R = zeros(T - 1, stocks);
logR = zeros(T - 1, stocks);

for j = 1:stocks
    for i = 1 : T-1
       % R(i-1, j) = ((S((i-1), j+1)) - S(i, j+1)) / S(i, j+1);
        R(i, j) = ((tradeClose((i+1), j)) - tradeClose(i, j)) / tradeClose(i, j);
        logR(i,j) = log(tradeClose(i+1,j)/tradeClose(i,j));
    end
end

%% Subtask 1 (a): Calculation of Value at Risk

C = cov(R);
sigma= sqrt(omega*C*omega');

VaR95 = norminv(0.95)*sigma*portfolio_value;
VaR975 = norminv(0.975)*sigma*portfolio_value;
VaR99 = norminv(0.99)*sigma*portfolio_value;

%% Subtask 1(b) %% 

LogPortfolioReturn= zeros(T-1,1);

% Calculate portfolio returns
    for t = 1: T-1
    LogPortfolioReturn(t, 1) = log(1+ (sum(R(t,:)))/stocks)
    end

    %Portfolio variance with EWMA
    VarianceEWMA = zeros(T-1,1);
    VarianceEWMA(2,1) = LogPortfolioReturn(2,1)^2;

    for t = 3 : T-1
        VarianceEWMA(t,1) = VarianceEWMA(t-1,1)*lambda + (1-lambda)*LogPortfolioReturn(t-1,1)^2;
    end

    %relative VaR with EWMA
relative_VaR_95_1v = zeros(1144, 1);
relative_VaR_99_1v = zeros(1144, 1);

    for t = 1: T-503
        relative_VaR_95_1v(t,1)= (1 - exp(norminv(0.95)*sqrt(VarianceEWMA(t+502, 1))));
        relative_VaR_99_1v(t,1)= (1 - exp(norminv(0.99)*sqrt(VarianceEWMA(t+502, 1))));
    end



%% Subtask 1 (c): Calculation of Relative VaR and Expected Shortfall


% Initialize arrays for relative VaR and Expected Shortfall
relative_VaR_95_1v2 = zeros(T - 503, 1);
relative_VaR_99_1v2 = zeros(T - 503, 1);
expected_shortfall_1v = zeros(T - 503, 1);

% Historical simulation with rolling window
for t = 503:T-1
    % Extract the historical portfolio returns for the rolling window
    historical_returns = LogPortfolioReturn(t-499:t, 1);

    % Calculate portfolio variance and volatility based on the rolling window
    rolling_variance = var(historical_returns);
    rolling_volatility = sqrt(rolling_variance);

    % Calculate relative VaR for t+1 based on the rolling window
    relative_VaR_95_1v(t-501, 1) = (1 - exp(norminv(0.95) * rolling_volatility));

    % Calculate relative VaR for t+1 based on the rolling window
    relative_VaR_99_1v(t-501, 1) = (1 - exp(norminv(0.99) * rolling_volatility));

    % Calculate Expected Shortfall for t+1 based on the rolling window
    exceedances = historical_returns(historical_returns < -relative_VaR_95_1v(t-501, 1));
    expected_shortfall_1v(t-501, 1) = -mean(exceedances);
end



%% Subtask 1 (d) %%

% Initialize arrays for relative VaR and Expected Shortfall
relative_VaR_95_1v_HW = zeros(T - 503, 1);
relative_VaR_99_1v_HW = zeros(T - 503, 1);

% Initialize the EWMA volatility
ewma_volatility = zeros(T - 1, 1);

% Initialize the first value of EWMA volatility using the corrected formula
R_bar = mean(LogPortfolioReturn(1:20, 1));
ewma_volatility(2, 1) = (1/19) * sum((LogPortfolioReturn(1:20, 1) - R_bar).^2);

% Historical simulation with rolling window
for t = 503:T-1
    % Extract the historical portfolio returns for the rolling window
    historical_returns = LogPortfolioReturn(t-499:t, 1);

    % Estimate portfolio volatility using EWMA
    ewma_volatility(t, 1) = 0.94 * ewma_volatility(t-1, 1) + (1 - 0.94) * historical_returns(end)^2;

    % Calculate relative VaR for t+1 based on the estimated volatility
    relative_VaR_95_1v_HW(t-501, 1) = (1 - exp(norminv(0.95) * sqrt(ewma_volatility(t, 1))));

    % Calculate relative VaR for t+1 based on the estimated volatility
    relative_VaR_99_1v_HW(t-501, 1) = (1 - exp(norminv(0.99) * sqrt(ewma_volatility(t, 1))));
end

% Now relative_VaR_95_1v_HW and relative_VaR_99_1v_HW
% contain the calculated values based on Hull and White (1998) with EWMA.

%% Subtask 1 (e) %%


% Two-sided Failure Rate Test for Subtask 1(b)

% Perform one-sided KS test for relative VaR at 1% significance level (greater)
[h1_greater_1pct, p1_greater_1pct, ksstat1_greater_1pct] = kstest(relative_VaR_95_1v, 'Alpha', 0.01, 'Tail', 'larger');

% Perform one-sided KS test for relative VaR at 1% significance level (smaller)
[h1_smaller_1pct, p1_smaller_1pct, ksstat1_smaller_1pct] = kstest(relative_VaR_95_1v, 'Alpha', 0.01, 'Tail', 'smaller');

% Combine p-values for two-sided test
p1_two_sided_1pct = 2 * min(p1_greater_1pct, p1_smaller_1pct);

% Display results
fprintf('Two-sided KS Test for Relative VaR (Subtask 1(b)):\n');
fprintf('1%% Significance Level - Reject Null Hypothesis, p-value: %.4f, KS Stat: %.4f\n', p1_two_sided_1pct, max(ksstat1_greater_1pct, ksstat1_smaller_1pct));

% Perform one-sided KS test for relative VaR at 5% significance level (greater)
[h1_greater_5pct, p1_greater_5pct, ksstat1_greater_5pct] = kstest(relative_VaR_95_1v, 'Alpha', 0.05, 'Tail', 'larger');

% Perform one-sided KS test for relative VaR at 5% significance level (smaller)
[h1_smaller_5pct, p1_smaller_5pct, ksstat1_smaller_5pct] = kstest(relative_VaR_95_1v, 'Alpha', 0.05, 'Tail', 'smaller');

% Combine p-values for two-sided test
p1_two_sided_5pct = 2 * min(p1_greater_5pct, p1_smaller_5pct);

% Display results
fprintf('Two-sided KS Test for Relative VaR (Subtask 1(b)):\n');
fprintf('5%% Significance Level - Reject Null Hypothesis, p-value: %.4f, KS Stat: %.4f\n', p1_two_sided_5pct, max(ksstat1_greater_5pct, ksstat1_smaller_5pct));

% Two-sided Failure Rate Test for Subtask 1(c)

% Perform one-sided KS test for relative VaR at 1% significance level (greater)
[h3_greater_1pct, p3_greater_1pct, ksstat3_greater_1pct] = kstest(relative_VaR_99_1v, 'Alpha', 0.01, 'Tail', 'larger');

% Perform one-sided KS test for relative VaR at 1% significance level (smaller)
[h3_smaller_1pct, p3_smaller_1pct, ksstat3_smaller_1pct] = kstest(relative_VaR_99_1v, 'Alpha', 0.01, 'Tail', 'smaller');

% Combine p-values for two-sided test
p3_two_sided_1pct = 2 * min(p3_greater_1pct, p3_smaller_1pct);

% Display results
fprintf('Two-sided KS Test for Relative VaR (Subtask 1(c)):\n');
fprintf('1%% Significance Level - Reject Null Hypothesis, p-value: %.4f, KS Stat: %.4f\n', p3_two_sided_1pct, max(ksstat3_greater_1pct, ksstat3_smaller_1pct));

% Perform one-sided KS test for relative VaR at 5% significance level (greater)
[h3_greater_5pct, p3_greater_5pct, ksstat3_greater_5pct] = kstest(relative_VaR_99_1v, 'Alpha', 0.05, 'Tail', 'larger');

% Perform one-sided KS test for relative VaR at 5% significance level (smaller)
[h3_smaller_5pct, p3_smaller_5pct, ksstat3_smaller_5pct] = kstest(relative_VaR_99_1v, 'Alpha', 0.05, 'Tail', 'smaller');

% Combine p-values for two-sided test
p3_two_sided_5pct = 2 * min(p3_greater_5pct, p3_smaller_5pct);

% Display results
fprintf('Two-sided KS Test for Relative VaR (Subtask 1(c)):\n');
fprintf('5%% Significance Level - Reject Null Hypothesis, p-value: %.4f, KS Stat: %.4f\n', p3_two_sided_5pct, max(ksstat3_greater_5pct, ksstat3_smaller_5pct));

% Two-sided Failure Rate Test for Subtask 1(d)

% Perform one-sided KS test for relative VaR at 1% significance level (greater)
[h5_greater_1pct, p5_greater_1pct, ksstat5_greater_1pct] = kstest(relative_VaR_99_1v_HW, 'Alpha', 0.01, 'Tail', 'larger');

% Perform one-sided KS test for relative VaR at 1% significance level (smaller)
[h5_smaller_1pct, p5_smaller_1pct, ksstat5_smaller_1pct] = kstest(relative_VaR_99_1v_HW, 'Alpha', 0.01, 'Tail', 'smaller');

% Combine p-values for two-sided test
p5_two_sided_1pct = 2 * min(p5_greater_1pct, p5_smaller_1pct);

% Display results
fprintf('Two-sided KS Test for Relative VaR (Subtask 1(d)):\n');
fprintf('1%% Significance Level - Reject Null Hypothesis, p-value: %.4f, KS Stat: %.4f\n', p5_two_sided_1pct, max(ksstat5_greater_1pct, ksstat5_smaller_1pct));

% Perform one-sided KS test for relative VaR at 5% significance level (greater)
[h5_greater_5pct, p5_greater_5pct, ksstat5_greater_5pct] = kstest(relative_VaR_99_1v_HW, 'Alpha', 0.05, 'Tail', 'larger');

% Perform one-sided KS test for relative VaR at 5% significance level (smaller)
[h5_smaller_5pct, p5_smaller_5pct, ksstat5_smaller_5pct] = kstest(relative_VaR_99_1v_HW, 'Alpha', 0.05, 'Tail', 'smaller');

% Combine p-values for two-sided test
p5_two_sided_5pct = 2 * min(p5_greater_5pct, p5_smaller_5pct);

% Display results
fprintf('Two-sided KS Test for Relative VaR (Subtask 1(d)):\n');
fprintf('5%% Significance Level - Reject Null Hypothesis, p-value: %.4f, KS Stat: %.4f\n\n\n', p5_two_sided_5pct, max(ksstat5_greater_5pct, ksstat5_smaller_5pct));

%% Subtask 1 (f) %%

% % Two-sided Failure Rate Test for Subtask 1(e) - Serial Dependence Test


% Set significance levels
alpha_1pct = 0.01;
alpha_5pct = 0.05;

% Serial dependence test for Subtask 1(b) - Rolling Window
[~, ~, lb_1pct_b, ub_1pct_b] = lbqtest(relative_VaR_95_1v, 'Lags', [1 2], 'Alpha', alpha_1pct);
[~, ~, lb_5pct_b, ub_5pct_b] = lbqtest(relative_VaR_95_1v, 'Lags', [1 2], 'Alpha', alpha_5pct);

% Display results for Subtask 1(b)
fprintf('Serial Dependence Test for Relative VaR (Subtask 1(b)):\n');
fprintf('%g%% Significance Level - Ljung-Box Q Statistic: %.4f, Critical Values: [%.4f, %.4f]\n', alpha_1pct * 100, lb_1pct_b, lb_1pct_b, ub_1pct_b);
fprintf('%g%% Significance Level - Ljung-Box Q Statistic: %.4f, Critical Values: [%.4f, %.4f]\n', alpha_5pct * 100, lb_5pct_b, lb_5pct_b, ub_5pct_b);










% % Serial dependence test for Subtask 1(c) - Rolling Window
% [~, ~, lb_1pct_c, ub_1pct_c] = lbqtest(relative_VaR_99_1v2, 'Lags', [1 2], 'Alpha', alpha_1pct);
% [~, ~, lb_5pct_c, ub_5pct_c] = lbqtest(relative_VaR_99_1v2, 'Lags', [1 2], 'Alpha', alpha_5pct);
% 
% % Display results for Subtask 1(c)
% fprintf('Serial Dependence Test for Relative VaR (Subtask 1(c)):\n');
% fprintf('%g%% Significance Level - Ljung-Box Q Statistic: %.4f, Critical Values: [%.4f, %.4f]\n', alpha_1pct * 100, lb_1pct_c, lb_1pct_c, ub_1pct_c);
% fprintf('5%% Significance Level - Ljung-Box Q Statistic, Critical Values: [%.4f, %.4f]\n\n', alpha_5pct * 100, lb_5pct_c, lb_5pct_c, ub_5pct_c);
% 
% % Serial dependence test for Subtask 1(d) - Rolling Window
% [~, ~, lb_1pct_d, ub_1pct_d] = lbqtest(relative_VaR_99_1v_HW, 'Lags', [1 2], 'Alpha', alpha_1pct);
% [~, ~, lb_5pct_d, ub_5pct_d] = lbqtest(relative_VaR_99_1v_HW, 'Lags', [1 2], 'Alpha', alpha_5pct);
% 
% % Display results for Subtask 1(d)
% fprintf('Serial Dependence Test for Relative VaR (Subtask 1(d)):\n');
% fprintf('%g%% Significance Level - Ljung-Box Q Statistic: %.4f, Critical Values: [%.4f, %.4f]\n', alpha_1pct * 100, lb_1pct_d, lb_1pct_d, ub_1pct_d);
% fprintf('5%% Significance Level - Ljung-Box Q Statistic, Critical Values: [%.4f, %.4f]\n\n', alpha_5pct * 100, lb_5pct_d, lb_5pct_d, ub_5pct_d);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Task 2: Model Training
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Subtask 2.1: Split Data
% Split the data into training and testing sets.
%[train_data, test_data] = splitData(cleaned_data);

%% Subtask 2.2: Train Model
% Train a machine learning model using the training data.
%model = trainModel(train_data);

%% Subtask 2.3: Evaluate Model
% Evaluate the model using the testing data.
%accuracy = evaluateModel(model, test_data);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Task 3: Results Analysis
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Subtask 3.1: Display Results
% Display the accuracy of the trained model.
%disp(['Model Accuracy: ' num2str(accuracy)]);

%% Subtask 3.2: Visualize Results
% Visualize the results using plots or other visualization techniques.
%visualizeResults(model, test_data);
% %% Subtask 1 (c): Calculation of Relative VaR and Expected Shortfall
% 
% 
% % omega = alpha(i) / portfolio_value;
% % 
% % omega_vector = ones(15, 1) * omega(i);
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% % Task 2: Model Training
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% %% Subtask 2.1: Split Data
% % Split the data into training and testing sets.
% [train_data, test_data] = splitData(cleaned_data);
% 
% %% Subtask 2.2: Train Model
% % Train a machine learning model using the training data.
% model = trainModel(train_data);
% 
% %% Subtask 2.3: Evaluate Model
% % Evaluate the model using the testing data.
% accuracy = evaluateModel(model, test_data);
% 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% % Task 3: Results Analysis
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% %% Subtask 3.1: Display Results
% % Display the accuracy of the trained model.
% disp(['Model Accuracy: ' num2str(accuracy)]);
% 
% %% Subtask 3.2: Visualize Results
% % Visualize the results using plots or other visualization techniques.
% visualizeResults(model, test_data);
